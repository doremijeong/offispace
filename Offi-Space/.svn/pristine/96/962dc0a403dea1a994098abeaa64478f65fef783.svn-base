package kr.co.offispace.security;

import org.springframework.security.authentication.AuthenticationProvider;
import org.springframework.security.authentication.BadCredentialsException;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.AuthenticationException;
import org.springframework.security.core.userdetails.UserDetails;

import kr.co.offispace.dto.EmployeeVO;
import kr.co.offispace.service.employee.EmployeeService;

public class CustomAuthenticationProvider implements AuthenticationProvider{

	private EmployeeService employeeService;
	public void setEmployeeService(EmployeeService employeeService) {
		this.employeeService = employeeService;
	}
	
	
	@Override
	public Authentication authenticate(Authentication auth) throws AuthenticationException {
		String login_id = (String)auth.getPrincipal();
		String login_pwd = (String)auth.getCredentials();
		System.out.println(login_id);
		
		EmployeeVO employee = null;
		try {
			employee = employeeService.getEmployee(login_id);
		} catch (Exception e) {
			e.printStackTrace();
			throw new BadCredentialsException("서버 장애로 서비스가 불가합니다.");
		}
		
		if(employee != null) {
			if(login_pwd.equals(employee.getEmpPassword())) { //아이디 패스워드 일치
				
				UserDetails authUser = new User(employee);
				boolean invalidCheck = authUser.isAccountNonExpired()
									&& authUser.isAccountNonLocked()
									&& authUser.isCredentialsNonExpired()
									&& authUser.isEnabled();
				if(invalidCheck) {
					//스트링 시큐리티 내부 클래스로 인증 토큰 생성한다.
					//auth.getPrincipal() : id
					//auth.getCredentials() : pwd
					UsernamePasswordAuthenticationToken result =
							new UsernamePasswordAuthenticationToken(authUser.getUsername(),
																	authUser.getPassword(),
																	authUser.getAuthorities());
					
					//전달할 내용을 설정한 후
					result.setDetails(authUser);
					//리턴한다.successHandler로 전송된다.
					return result;
				}
				
				throw new BadCredentialsException("상태변경으로 로그인이 불가합니다.");
			}else {
				throw new BadCredentialsException("패스워드가 일치하지 않습니다.");
			}
		} else {
			throw new BadCredentialsException("존재하지 않는 아이디 입니다.");
		}
		
	}

	@Override
	public boolean supports(Class<?> auth) {
		return auth.equals(UsernamePasswordAuthenticationToken.class);
	}

}
